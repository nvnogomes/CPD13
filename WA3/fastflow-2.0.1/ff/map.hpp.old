/* -*- Mode: C++; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */

/*! 
 *  \file map.hpp
 *  \brief This file describes the map skeleton.
 */
 
#ifndef _FF_MAP_HPP_
#define _FF_MAP_HPP_
/* ***************************************************************************
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License version 3 as 
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 *
 ****************************************************************************
 */


#include <iostream>
#include <vector>
#include <algorithm>
#include <ff/platforms/platform.h>
#include <ff/lb.hpp>
#include <ff/gt.hpp>
#include <ff/node.hpp>
#include <ff/farm.hpp>
#include <ff/partitioners.hpp>

namespace ff {

/*!
 *  \ingroup high_level
 *
 *  @{
 */

class ff_map: public ff_node {
public:
    // worker function type
    typedef basePartitioner* (*map_worker_F_t) (basePartitioner*);
private:
    // Emitterr, Collector and Worker of the farm
    class mapE: public ff_node {
    public:
        mapE(my_loadbalancer * const lb): lb(lb) {}	
        void * svc(void * task) {
            lb->broadcast(task);
            return GO_ON;
        }
    private:
        my_loadbalancer * lb;
    };    
    class mapC: public ff_node {
    public:
        mapCr(my_gatherer * const gt): gt(gt) {}	
        void * svc(void *task) {  
            void *Task[gt->getnworkers()];
            gt->all_gather(task, &Task[0]);
            return Task[0];  // <------------------------- CONTROLLARE
        }
    private:
        my_gatherer *const gt;
    };
    class mapW: public ff_node {
    public:
        mapW(map_worker_F_t mapF, basePartitioner *const P):mapF(mapF),P(P) {}
        void * svc(void * task) {
            P->setTask(task);
            return mapF(P->getPartition(ff_node::get_my_id()));
        }
    private:
        map_worker_F_t  mapF;
        basePartitioner * const P;
    };
    
protected:
    
    // ff_node interface
    void* svc(void * task) { return NULL; }
    int   svc_init()       { return -1; };
    void  svc_end()        {}

    int create_input_buffer(int nentries, bool fixedsize) {
	return farm.create_input_buffer(nentries, fixedsize);
    }
    
    int create_output_buffer(int nentries, bool fixedsize=false) {
        return farm.create_output_buffer(nentries,fixedsize);
    }

    int set_output_buffer(FFBUFFER * const o) {
        return farm.set_output_buffer(o);
    }

public:

    ff_map(map_worker_F_t mapF, int nWorkers) {
        farm.add_emitter(new mapE(farm.getlb()));
        farm.add_collector(new mapC(farm.getgt()));
        std::vector<ff_node *> w;
        for(int i=0;i<nWorkers;++i) w.push_back(new mapW(mapF,mapP));
        farm.add_workers(w);
    }
    
    ~ff_map() {
        delete farm.getEmitter();
        delete farm.getCollector();
        ff_node** w= farm.getWorkers();
        int nw= farm.getNWorkers();
        for(int i=0;i<nw;;++i) delete w[i];	
    }
    
    void setPartitioner(basePartitioner* P) {
        if (!P) {
            error("MAP, NULL partitioner passed\n");
            return;
        }
        if (mapP) delete mapP;
        mapP = P;
    }

    int run(bool skip_init=false) {
        return farm.run(skip_init);
    }

    int run_and_wait_end() {
        return farm.run_and_wait_end();
    }

    int run_then_freeze() {
        return run_then_freeze();
    }
    int wait(/* timeval */ ) {
        return farm.wait();
    }

    int wait_freezing(/* timeval */ ) {
        int ret=0;
        if (lb->wait_freezing()<0) ret=-1;
        if (collector) if (gt->wait_freezing()<0) ret=-1;
        return ret; 
    } 

    void stop() {
        lb->stop();
        if (collector) gt->stop();
    }

    void freeze() {
        lb->freeze();
        if (collector) gt->freeze();
    }

    void thaw() {
        lb->thaw();
        if (collector) gt->thaw();
    }

    /** check if the farm is frozen */
    bool isfrozen() { return lb->isfrozen(); }

    /** offload the given task to the farm */
    inline bool offload(void * task,
                        unsigned int retry=((unsigned int)-1),
                        unsigned int ticks=ff_loadbalancer::TICKS2WAIT) { 
        FFBUFFER * inbuffer = get_in_buffer();

        if (inbuffer) {
            for(unsigned int i=0;i<retry;++i) {
                if (inbuffer->push(task)) return true;
                ticks_wait(ticks);
            }     
            return false;
        }
        
        if (!has_input_channel) 
            error("FARM: accelerator is not set, offload not available");
        else
            error("FARM: input buffer creation failed");
        return false;

    }    

    // return values:
    //   false: EOS arrived or too many retries
    //   true:  there is a new value
    inline bool load_result(void ** task,
                            unsigned int retry=((unsigned int)-1),
                            unsigned int ticks=ff_gatherer::TICKS2WAIT) {
        if (!collector) return false;
        for(unsigned int i=0;i<retry;++i) {
            if (gt->pop_nb(task)) {
                if ((*task != (void *)FF_EOS)) return true;
                else return false;
            }
            ticks_wait(ticks);
        }
        return false;
    }

    // return values:
    //   false: no task present
    //   true : there is a new value, you should check if the task is an FF_EOS
    inline bool load_result_nb(void ** task) {
        if (!collector) return false;
        return gt->pop_nb(task);
    }
    

    
private:
    ff_farm<map_lb, map_gt> farm;
    basePartitioner* mapP;
};
    
    /*!
     *  @}
     */
    
} // namespace ff

#endif /* _FF_MAP_HPP_ */
